#!/usr/bin/env python3

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback
import lightgbm as lgb

# These are the paths to where SageMaker mounts interesting things in your container.
prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')
inputdataconfig_path = os.path.join(prefix, 'input/config/inputdataconfig.json')

channel_names = ['train', 'valid']

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as f:
            hyperparams = json.load(f)

        with open(inputdataconfig_path, 'r') as f:
            inputdataconfig = json.load(f)

        inputdata_dic = {}
        for channel_name in inputdataconfig.keys():
            assert channel_name in channel_names, 'input data channel must be included in '+str(channel_names)
            inputdata_path = os.path.join(input_path, channel_name, channel_name+'.bin')
            inputdata_dic[channel_name] = lgb.Dataset(inputdata_path)

            
        # Training
        model = lgb.train(
            hyperparams,
            inputdata_dic['train'],
            valid_sets= [inputdata_dic['valid']] if 'valid' in inputdata_dic else None
        )
        
        # Save the model
        model.save_model(os.path.join(model_path, 'lightgbm_model.txt'))
     
        # The trained model can also be dumped to JSON format
        #json_model = model.dump_model()
        
        print('Training complete.')

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)